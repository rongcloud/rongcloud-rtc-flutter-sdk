def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
assert flutterRoot != null, "Flutter SDK not found. Define location with flutter.sdk in the local.properties file."

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_rtc_demo_for_test"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a'
        }
    }

//    packagingOptions {
//        pickFirst 'lib/armeabi/libRongIMLib.so'
//        pickFirst 'lib/armeabi-v7a/libRongIMLib.so'
//        pickFirst 'lib/arm64-v8a/libRongIMLib.so'
//        pickFirst 'lib/x86/libRongIMLib.so'
//        pickFirst 'lib/x86_64/libRongIMLib.so'

//        pickFirst 'lib/armeabi/libsqlite.so'
//        pickFirst 'lib/armeabi-v7a/libsqlite.so'
//        pickFirst 'lib/arm64-v8a/libsqlite.so'
//        pickFirst 'lib/x86/libsqlite.so'
//        pickFirst 'lib/x86_64/libsqlite.so'
//    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false
        }
    }
}

flutter {
    source '../..'
}
